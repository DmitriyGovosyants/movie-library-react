{"version":3,"file":"static/js/library-page.618ccfee.chunk.js","mappings":"2UAUMA,EAAgB,CACpBC,QAASC,EAAAA,GAAAA,MACTC,QAASC,EAAAA,GAAAA,QAGEC,EAAU,WACrB,IAAQC,GAASC,EAAAA,EAAAA,KAATD,KACAE,GAAeC,EAAAA,EAAAA,KAAfD,WACR,GAA0CE,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,IAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAAsCN,EAAAA,EAAAA,WAAS,GAA/C,eAAOO,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,IAAgBnB,GAAxD,eAAOoB,EAAP,KAAqBC,EAArB,KACMpB,EAAUmB,EAAaE,IAAI,WAC3BnB,EAAUiB,EAAaE,IAAI,WAI3BC,GAASC,EAAAA,EAAAA,cACb,SAAAC,GACE,OAAItB,IAAYC,EAAAA,GAAAA,QACP,OAAIqB,GAAgBC,MACzB,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAD,OAAI3B,EAAJ,cAA0B0B,EAAE,GAAD,OAAI1B,EAAJ,iBAGtCE,IAAYC,EAAAA,GAAAA,QACP,OAAIqB,GAAgBC,MACzB,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,aAAeF,EAAEE,gBAG7B1B,IAAYC,EAAAA,GAAAA,MACP,OAAIqB,GAAgBC,MAAK,SAACC,EAAGC,GAAJ,OAC9BA,EAAEE,aAAaC,cAAcJ,EAAEG,sBAFnC,IAMF,CAAC3B,EAASF,IAGN+B,GAAWR,EAAAA,EAAAA,cACf,SAAAS,GACE,OAAI,OAAClB,QAAD,IAACA,GAAAA,EAAcmB,MAInB,OAAInB,QAAJ,IAAIA,GAAAA,EAAcmB,MACTD,EAAWE,QAAO,SAAAC,GACvB,OAAOA,EAAMC,OAAOC,SAASvB,EAAamB,eAF9C,EAHSD,IASX,QAAClB,QAAD,IAACA,OAAD,EAACA,EAAcmB,SAGjBK,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,iGACzBtB,GAAe,GADU,mBAIAuB,EAAAA,EAAAA,IAAsBnC,GAJtB,OAIjBoC,EAJiB,OAKjBjB,EAAiBkB,OAAOC,OAAOF,EAASG,OAAOV,QACnD,SAAAC,GAAK,OAAuB,IAAnBA,EAAMnC,MAGjB6C,EAAgBrB,EAAgBjB,GAC1ByB,EAAaV,EAAOE,GACpBsB,EAAef,EAASC,GAC9BrB,EAAiBmC,GAZM,kDAcvBC,EAAAA,GAAAA,KAAA,gCAAoC/C,IACpCW,EAAiB,IAfM,0DAAH,qDAkBxB4B,MACC,CAACR,EAAUjB,EAAcP,EAAYS,EAAaM,EAAQjB,EAAML,IAEnE,IAAM6C,EAAkB,SAACG,EAAUzC,GACjC,IAAM0C,EAAeD,EAClBE,SAAQ,SAAAf,GAAK,OAAIA,EAAMC,UACvBF,QAAO,SAACiB,EAASC,EAAOC,GAAjB,OAA2BA,EAAMC,QAAQH,KAAaC,KAC7DG,KAAI,SAAAJ,GAAO,OAAI5C,EAAWiD,MAAK,qBAAGC,KAAgBN,QAErDtC,EAAaoC,IAGf,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CACE/C,QAASA,EACTF,QAASA,EACToB,gBAAiBA,EACjBN,aAAcA,EACdC,gBAAiBA,EACjBH,UAAWA,EACXF,cAAeA,IAGU,KAAb,OAAbA,QAAa,IAAbA,OAAA,EAAAA,EAAegD,UACd,SAAC,KAAD,CAAWC,OAAQjD,EAAeO,eAAgBA,UAO5D","sources":["pages/Library.jsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { MovieList, LibraryControlBar } from 'components';\nimport { Section, Container } from 'layout';\nimport { useUser } from 'context/userContext';\nimport { fetchAllLibraryMovies } from 'services/libraryApi';\nimport { SortConstants, ViewConstants } from 'constants/constants';\nimport { useTMDBData } from 'context/tmdbDataContext';\n\nconst defaultParams = {\n  viewing: ViewConstants.QUEUE,\n  sorting: SortConstants.LATEST,\n};\n\nexport const Library = () => {\n  const { user } = useUser();\n  const { genresList } = useTMDBData();\n  const [libraryMovies, setLibraryMovies] = useState([]);\n  const [allGenres, setAllGenres] = useState([]);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [refreshPage, setRefreshPage] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams(defaultParams);\n  const viewing = searchParams.get('viewing');\n  const sorting = searchParams.get('sorting');\n\n  // console.log(searchParams, viewing, sorting);\n\n  const sortBy = useCallback(\n    moviesByStatus => {\n      if (sorting === SortConstants.LATEST) {\n        return [...moviesByStatus].sort(\n          (a, b) => b[`${viewing}DateAdded`] - a[`${viewing}DateAdded`]\n        );\n      }\n      if (sorting === SortConstants.RATING) {\n        return [...moviesByStatus].sort(\n          (a, b) => b.vote_average - a.vote_average\n        );\n      }\n      if (sorting === SortConstants.YEAR) {\n        return [...moviesByStatus].sort((a, b) =>\n          b.release_date.localeCompare(a.release_date)\n        );\n      }\n    },\n    [sorting, viewing]\n  );\n\n  const filterBy = useCallback(\n    sortMovies => {\n      if (!filterStatus?.value) {\n        return sortMovies;\n      }\n\n      if (filterStatus?.value) {\n        return sortMovies.filter(movie => {\n          return movie.genres.includes(filterStatus.value);\n        });\n      }\n    },\n    [filterStatus?.value]\n  );\n\n  useEffect(() => {\n    const fetchLibraryMovies = async () => {\n      setRefreshPage(false);\n\n      try {\n        const snapshot = await fetchAllLibraryMovies(user);\n        const moviesByStatus = Object.values(snapshot.val()).filter(\n          movie => movie[viewing] === true\n        );\n\n        getUniqueGenres(moviesByStatus, genresList);\n        const sortMovies = sortBy(moviesByStatus);\n        const filterMovies = filterBy(sortMovies);\n        setLibraryMovies(filterMovies);\n      } catch (error) {\n        toast.info(`You have no movies in ${viewing}`);\n        setLibraryMovies([]);\n      }\n    };\n    fetchLibraryMovies();\n  }, [filterBy, filterStatus, genresList, refreshPage, sortBy, user, viewing]);\n\n  const getUniqueGenres = (movieArr, genresList) => {\n    const uniqueGenres = movieArr\n      .flatMap(movie => movie.genres)\n      .filter((genreID, index, array) => array.indexOf(genreID) === index)\n      .map(genreID => genresList.find(({ id }) => id === genreID));\n\n    setAllGenres(uniqueGenres);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <LibraryControlBar\n          sorting={sorting}\n          viewing={viewing}\n          setSearchParams={setSearchParams}\n          filterStatus={filterStatus}\n          setFilterStatus={setFilterStatus}\n          allGenres={allGenres}\n          libraryMovies={libraryMovies}\n        />\n\n        {libraryMovies?.length !== 0 && (\n          <MovieList movies={libraryMovies} setRefreshPage={setRefreshPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Library;\n"],"names":["defaultParams","viewing","ViewConstants","sorting","SortConstants","Library","user","useUser","genresList","useTMDBData","useState","libraryMovies","setLibraryMovies","allGenres","setAllGenres","filterStatus","setFilterStatus","refreshPage","setRefreshPage","useSearchParams","searchParams","setSearchParams","get","sortBy","useCallback","moviesByStatus","sort","a","b","vote_average","release_date","localeCompare","filterBy","sortMovies","value","filter","movie","genres","includes","useEffect","fetchLibraryMovies","fetchAllLibraryMovies","snapshot","Object","values","val","getUniqueGenres","filterMovies","toast","movieArr","uniqueGenres","flatMap","genreID","index","array","indexOf","map","find","id","length","movies"],"sourceRoot":""}