{"version":3,"file":"static/js/library-page.30eaac77.chunk.js","mappings":"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","sources":["pages/Library.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Section, Container, Button, MovieList } from 'components';\nimport { useUser } from 'context/userContext';\nimport { fetchAllLibraryMovies } from 'services/libraryApi';\nimport { SortStatus, ViewStatus } from 'constants/constants';\nimport { useEffect } from 'react';\nimport { useCallback } from 'react';\n\nexport const Library = () => {\n  const { user } = useUser();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [libraryMovies, setLibraryMovies] = useState([]);\n  const [allGenres, setAllGenres] = useState([]);\n  const [viewStatus, setViewStatus] = useState(ViewStatus.QUEUE);\n  const [sortStatus, setSortStatus] = useState(SortStatus.LATEST);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [refreshPage, setRefreshPage] = useState(false);\n\n  const sortBy = useCallback(\n    moviesByStatus => {\n      if (sortStatus === SortStatus.LATEST) {\n        return [...moviesByStatus].sort(\n          (a, b) => b[`${viewStatus}DateAdded`] - a[`${viewStatus}DateAdded`]\n        );\n      }\n      if (sortStatus === SortStatus.RATING) {\n        return [...moviesByStatus].sort(\n          (a, b) => b.vote_average - a.vote_average\n        );\n      }\n      if (sortStatus === SortStatus.YEAR) {\n        return [...moviesByStatus].sort((a, b) =>\n          b.release_date.localeCompare(a.release_date)\n        );\n      }\n    },\n    [sortStatus, viewStatus]\n  );\n\n  const filterBy = useCallback(\n    sortMovies => {\n      if (!filterStatus) {\n        return sortMovies;\n      }\n\n      if (filterStatus) {\n        return sortMovies.filter(movie => {\n          return movie.genres.includes(filterStatus);\n        });\n      }\n    },\n    [filterStatus]\n  );\n\n  useEffect(() => {\n    const fetchLibraryMovies = async () => {\n      setRefreshPage(false);\n      setSearchParams({ view: viewStatus });\n\n      try {\n        const snapshot = await fetchAllLibraryMovies(user);\n        const moviesByStatus = Object.values(snapshot.val()).filter(\n          movie => movie[viewStatus] === true\n        );\n\n        getUniqueGenres(moviesByStatus);\n        const sortMovies = sortBy(moviesByStatus);\n        const filterMovies = filterBy(sortMovies);\n        setLibraryMovies(filterMovies);\n      } catch (error) {\n        toast.info(`You have no movies in ${viewStatus}`);\n        setLibraryMovies([]);\n      }\n    };\n    fetchLibraryMovies();\n  }, [\n    filterBy,\n    filterStatus,\n    refreshPage,\n    setSearchParams,\n    sortBy,\n    user,\n    viewStatus,\n  ]);\n\n  const getUniqueGenres = movieArr => {\n    const uniqueGenres = movieArr\n      .flatMap(movie => movie.genres.split(', '))\n      .filter((movie, index, array) => array.indexOf(movie) === index)\n      .sort((a, b) => a.localeCompare(b));\n\n    setAllGenres(uniqueGenres);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <label>\n          LATEST\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.LATEST}\n            name=\"sortBy\"\n            value={SortStatus.LATEST}\n            onChange={e => setSortStatus(e.target.value)}\n          />\n        </label>\n        <label>\n          RATING\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.RATING}\n            name=\"sortBy\"\n            value={SortStatus.RATING}\n            onChange={e => setSortStatus(e.target.value)}\n          />\n        </label>\n        <label>\n          YEAR\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.YEAR}\n            name=\"sortBy\"\n            value={SortStatus.YEAR}\n            onChange={e => setSortStatus(e.target.value)}\n          />\n        </label>\n\n        <select\n          name=\"genres\"\n          value={filterStatus}\n          onChange={e => setFilterStatus(e.target.value)}\n        >\n          <option value=\"\">CHOOSE GENRE</option>\n          {allGenres.map(genre => {\n            return (\n              <option key={genre} value={genre}>\n                {genre}\n              </option>\n            );\n          })}\n          <option value=\"\"> - ALL - </option>\n        </select>\n\n        <Button onClick={() => setViewStatus(ViewStatus.QUEUE)}>Queue</Button>\n        <Button onClick={() => setViewStatus(ViewStatus.WATCHED)}>\n          Watched\n        </Button>\n        {searchParams.get('view')}\n        {libraryMovies?.length}\n        {libraryMovies?.length !== 0 && (\n          <MovieList movies={libraryMovies} setRefreshPage={setRefreshPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Library;\n"],"names":["Library","user","useUser","useSearchParams","searchParams","setSearchParams","useState","libraryMovies","setLibraryMovies","allGenres","setAllGenres","ViewStatus","viewStatus","setViewStatus","SortStatus","sortStatus","setSortStatus","filterStatus","setFilterStatus","refreshPage","setRefreshPage","sortBy","useCallback","moviesByStatus","sort","a","b","vote_average","release_date","localeCompare","filterBy","sortMovies","filter","movie","genres","includes","useEffect","fetchLibraryMovies","view","fetchAllLibraryMovies","snapshot","Object","values","val","getUniqueGenres","filterMovies","toast","movieArr","uniqueGenres","flatMap","split","index","array","indexOf","type","checked","name","value","onChange","e","target","map","genre","onClick","get","length","movies"],"sourceRoot":""}