{"version":3,"file":"static/js/home-page.7695d2cd.chunk.js","mappings":"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","sources":["helpers/srcollToTop.js","pages/Home.jsx","hooks/usePrevious.js"],"sourcesContent":["  export const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'instant',\n    });\n  };","import { useState, useEffect, useCallback } from 'react';\nimport { usePrevious } from 'hooks/usePrevious';\nimport {\n  fetchMoviesOnTrend,\n  fetchMovieTopRated,\n  fetchMoviesByName,\n  fetchMoviesByGenre,\n} from 'services/movieApi';\nimport { scrollToTop } from 'helpers/srcollToTop';\nimport { HomeControlBar, MovieList, Pagination, Spinner } from 'components';\nimport { Section, Container } from 'layout';\nimport { useUser } from 'context/userContext';\nimport { SortConstants } from 'constants/constants';\nimport { toast } from 'react-toastify';\n\nconst Home = () => {\n  const [sortStatus, setSortStatus] = useState(SortConstants.TREND);\n  const [filterStatus, setFilterStatus] = useState(null);\n  const [search, setSearch] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const [showLoader, setShowLoader] = useState(false);\n  const prevQuery = usePrevious(search);\n  const { userLanguage } = useUser();\n\n  console.log(sortStatus, filterStatus, search);\n\n  const getMoviesOnTrend = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesOnTrend(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesTopRated = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMovieTopRated(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesByGenre = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    let extraSortStatus;\n    if (sortStatus === SortConstants.TREND) {\n      extraSortStatus = 'popularity.desc';\n    }\n    if (sortStatus === SortConstants.RATING) {\n      extraSortStatus = 'vote_average.desc';\n    }\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesByGenre(\n        page,\n        userLanguage.value,\n        filterStatus.value,\n        extraSortStatus\n      );\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [filterStatus?.value, page, sortStatus, userLanguage?.value]);\n\n  const getMoviesByName = useCallback(async () => {\n    if (search !== prevQuery) {\n      setMovies([]);\n      setPage(1);\n      setFilterStatus(null);\n      return;\n    }\n\n    const fetch = async () => {\n      setShowLoader(true);\n      scrollToTop();\n\n      try {\n        const {\n          data: { results, total_pages },\n        } = await fetchMoviesByName(page, search, userLanguage.value);\n\n        setTotalPage(total_pages);\n        setMovies([...results]);\n      } catch (e) {\n        toast.error(e.message);\n      } finally {\n        setShowLoader(false);\n      }\n    };\n    fetch();\n  }, [page, prevQuery, search, userLanguage.value]);\n\n  useEffect(() => {\n    if (sortStatus === SortConstants.TREND && !filterStatus) {\n      getMoviesOnTrend();\n      return;\n    }\n    if (sortStatus === SortConstants.RATING && !filterStatus) {\n      getMoviesTopRated();\n      return;\n    }\n    if (sortStatus !== SortConstants.SEARCH && filterStatus) {\n      getMoviesByGenre();\n      return;\n    }\n    if (sortStatus === SortConstants.SEARCH) {\n      getMoviesByName();\n      return;\n    }\n  }, [\n    filterStatus,\n    getMoviesByGenre,\n    getMoviesByName,\n    getMoviesOnTrend,\n    getMoviesTopRated,\n    sortStatus,\n  ]);\n\n  return (\n    <Section>\n      <Container>\n        <HomeControlBar\n          sortStatus={sortStatus}\n          setSortStatus={setSortStatus}\n          filterStatus={filterStatus}\n          setFilterStatus={setFilterStatus}\n          search={search}\n          setSearch={setSearch}\n          setPage={setPage}\n          page={page}\n          totalPage={totalPage}\n        />\n        {showLoader && <Spinner />}\n        {movies.length !== 0 && <MovieList movies={movies} />}\n        {movies.length > 0 && (\n          <Pagination setPage={setPage} page={page} totalPage={totalPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n","import { useEffect, useRef } from \"react\";\n\nexport const usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};"],"names":["scrollToTop","window","scrollTo","top","behavior","useState","SortConstants","sortStatus","setSortStatus","filterStatus","setFilterStatus","search","setSearch","movies","setMovies","page","setPage","totalPage","setTotalPage","showLoader","setShowLoader","prevQuery","value","ref","useRef","useEffect","current","usePrevious","userLanguage","useUser","console","log","getMoviesOnTrend","useCallback","fetchMoviesOnTrend","data","results","total_pages","toast","message","getMoviesTopRated","fetchMovieTopRated","getMoviesByGenre","extraSortStatus","fetchMoviesByGenre","getMoviesByName","fetch","fetchMoviesByName","length"],"sourceRoot":""}