{"version":3,"file":"static/js/library-page.21761328.chunk.js","mappings":"6SAOaA,EAAU,WACrB,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,QAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACQC,GAASC,EAAAA,EAAAA,KAATD,KACR,GAAwCE,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAkB,mCAAG,WAAOC,EAAWC,GAAlB,qGAEAC,EAAAA,EAAAA,IAAsBR,GAFtB,OAEjBS,EAFiB,OAGjBC,EAAiBC,OAAOC,OAAOH,EAASI,OAAOC,QACnD,SAAAC,GAAK,OAAyB,IAArBA,EAAMT,MAGXU,EAAaC,EAAOV,EAAWG,EAAgBJ,GACrDT,EAAkBmB,GARK,gDAUvBE,EAAAA,GAAAA,KAAA,gCAAoCZ,IAVb,yDAAH,wDAexBa,QAAQC,IAAItB,GAEZ,IAAMmB,EAAS,SAACV,EAAWG,EAAgBJ,GACzC,MAAkB,SAAdC,GACK,OAAIG,GAAgBW,MAAK,SAACC,EAAGC,GAClC,OAAOA,EAAE,GAAD,OAAIjB,EAAJ,cAA4BgB,EAAE,GAAD,OAAIhB,EAAJ,iBAGvB,WAAdC,GACK,OAAIG,GAAgBW,MAAK,SAACC,EAAGC,GAClC,OAAOA,EAAC,aAAmBD,EAAC,qBAFhC,GAqBIE,EAAe,SAAAC,GACnB,IAAMnB,EAAYH,EAAauB,IAAI,QAC7BnB,EAAYkB,EAAEE,OAAOC,MAC3BvB,EAAmBC,EAAWC,GAC9BR,EAAcQ,IAGhB,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,qCAEE,kBACEsB,KAAK,QACLC,QAAwB,SAAfhC,EACTiC,KAAK,SACLH,MAAO,OACPI,SAAUR,QAGd,uCAEE,kBACEK,KAAK,QACLC,QAAwB,WAAfhC,EACTiC,KAAK,SACLH,MAAO,SACPI,SAAUR,QAId,SAAC,KAAD,CACES,QAAS,WACP7B,EAAgB,CAAE8B,KAAM,UACxB7B,EAAmB,QAASP,IAHhC,oBAQA,SAAC,KAAD,CACEmC,QAAS,WACP7B,EAAgB,CAAE8B,KAAM,YACxB7B,EAAmB,UAAWP,IAHlC,qBAQCK,EAAauB,IAAI,QACU,KAAb,OAAd9B,QAAc,IAAdA,OAAA,EAAAA,EAAgBuC,UACf,SAAC,KAAD,CACEC,OAAQxC,EACRS,mBAAoBA,EACpBF,aAAcA,UAQ1B","sources":["pages/Library.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Section, Container, Button, MovieList } from 'components';\nimport { useUser } from 'context/userContext';\nimport { fetchAllLibraryMovies } from 'services/libraryApi';\n\nexport const Library = () => {\n  const [filteredMovies, setFilteredMovies] = useState([]);\n  const [sortStatus, setSortStatus] = useState('date');\n  const { user } = useUser();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const fetchLibraryMovies = async (viewValue, sortValue) => {\n    try {\n      const snapshot = await fetchAllLibraryMovies(user);\n      const moviesByStatus = Object.values(snapshot.val()).filter(\n        movie => movie[viewValue] === true\n      );\n\n      const sortMovies = sortBy(sortValue, moviesByStatus, viewValue);\n      setFilteredMovies(sortMovies);\n    } catch (error) {\n      toast.info(`You have no movies in ${viewValue}`);\n      // setMoviesByStatus([]);\n    }\n  };\n\n  console.log(sortStatus);\n\n  const sortBy = (sortValue, moviesByStatus, viewValue) => {\n    if (sortValue === 'date') {\n      return [...moviesByStatus].sort((a, b) => {\n        return b[`${viewValue}DateAdded`] - a[`${viewValue}DateAdded`];\n      });\n    }\n    if (sortValue === 'rating') {\n      return [...moviesByStatus].sort((a, b) => {\n        return b['vote_average'] - a['vote_average'];\n      });\n    }\n    // по году\n    // по жанру\n  };\n\n  // const sortByDate = (moviesByStatus, viewValue) => {\n  //   return [...moviesByStatus].sort((a, b) => {\n  //     return b[`${viewValue}DateAdded`] - a[`${viewValue}DateAdded`];\n  //   });\n  // };\n\n  // const sortByRating = moviesByStatus => {\n  //   return [...moviesByStatus].sort((a, b) => {\n  //     return b['vote_average'] - a['vote_average'];\n  //   });\n  // };\n\n  const handleChange = e => {\n    const viewValue = searchParams.get('view');\n    const sortValue = e.target.value;\n    fetchLibraryMovies(viewValue, sortValue);\n    setSortStatus(sortValue);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <label>\n          DATE\n          <input\n            type=\"radio\"\n            checked={sortStatus === 'date'}\n            name=\"sortBy\"\n            value={'date'}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          RATING\n          <input\n            type=\"radio\"\n            checked={sortStatus === 'rating'}\n            name=\"sortBy\"\n            value={'rating'}\n            onChange={handleChange}\n          />\n        </label>\n\n        <Button\n          onClick={() => {\n            setSearchParams({ view: 'queue' });\n            fetchLibraryMovies('queue', sortStatus);\n          }}\n        >\n          Queue\n        </Button>\n        <Button\n          onClick={() => {\n            setSearchParams({ view: 'watched' });\n            fetchLibraryMovies('watched', sortStatus);\n          }}\n        >\n          Watched\n        </Button>\n        {searchParams.get('view')}\n        {filteredMovies?.length !== 0 && (\n          <MovieList\n            movies={filteredMovies}\n            fetchLibraryMovies={fetchLibraryMovies}\n            searchParams={searchParams}\n          />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Library;\n"],"names":["Library","useState","filteredMovies","setFilteredMovies","sortStatus","setSortStatus","user","useUser","useSearchParams","searchParams","setSearchParams","fetchLibraryMovies","viewValue","sortValue","fetchAllLibraryMovies","snapshot","moviesByStatus","Object","values","val","filter","movie","sortMovies","sortBy","toast","console","log","sort","a","b","handleChange","e","get","target","value","type","checked","name","onChange","onClick","view","length","movies"],"sourceRoot":""}