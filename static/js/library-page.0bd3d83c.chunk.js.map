{"version":3,"file":"static/js/library-page.0bd3d83c.chunk.js","mappings":"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","sources":["constants/constants.js","pages/Library.jsx"],"sourcesContent":["export const SortStatus = {\n  LATEST: 'latest',\n  RATING: 'rating',\n  YEAR: 'year',\n};\n\n// добавить queue, watched, view","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Section, Container, Button, MovieList } from 'components';\nimport { useUser } from 'context/userContext';\nimport { fetchAllLibraryMovies } from 'services/libraryApi';\nimport { SortStatus } from 'constants/constants';\n\nexport const Library = () => {\n  const [libraryMovies, setLibraryMovies] = useState([]);\n  const [sortStatus, setSortStatus] = useState(SortStatus.LATEST);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [allGenres, setAllGenres] = useState([]);\n  const { user } = useUser();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const fetchLibraryMovies = async (viewStatus, sortStatus, filterStatus) => {\n    setSearchParams({ view: viewStatus });\n    try {\n      const snapshot = await fetchAllLibraryMovies(user);\n      const moviesByStatus = Object.values(snapshot.val()).filter(\n        movie => movie[viewStatus] === true\n      );\n\n      const sortMovies = sortBy(sortStatus, moviesByStatus, viewStatus);\n\n      const genres = sortMovies\n        .flatMap(movie => movie.genres.split(','))\n        .filter((movie, index, array) => array.indexOf(movie) === index);\n      setAllGenres(genres);\n\n      if (filterStatus) {\n        const filterMovies = filterBy(sortMovies, filterStatus);\n        setLibraryMovies(filterMovies);\n      }\n\n      if (!filterStatus) {\n        setLibraryMovies(sortMovies);\n      }\n    } catch (error) {\n      toast.info(`You have no movies in ${viewStatus}`);\n      setLibraryMovies([]);\n    }\n  };\n\n  const sortBy = (sortStatus, moviesByStatus, viewStatus) => {\n    if (sortStatus === SortStatus.LATEST) {\n      return [...moviesByStatus].sort(\n        (a, b) => b[`${viewStatus}DateAdded`] - a[`${viewStatus}DateAdded`]\n      );\n    }\n    if (sortStatus === SortStatus.RATING) {\n      return [...moviesByStatus].sort(\n        (a, b) => b.vote_average - a.vote_average\n      );\n    }\n    if (sortStatus === SortStatus.YEAR) {\n      return [...moviesByStatus].sort((a, b) =>\n        b.release_date.localeCompare(a.release_date)\n      );\n    }\n  };\n\n  const filterBy = (sortMovies, filterStatus) => {\n    return sortMovies.filter(movie => {\n      return movie.genres.includes(filterStatus);\n    });\n  };\n\n  const handleSortChange = e => {\n    const viewValue = searchParams.get('view');\n    const sortValue = e.target.value;\n    fetchLibraryMovies(viewValue, sortValue, filterStatus);\n    setSortStatus(sortValue);\n  };\n\n  const handleGenreChange = e => {\n    const viewValue = searchParams.get('view');\n    const filterValue = e.target.value;\n    fetchLibraryMovies(viewValue, sortStatus, filterValue);\n    setFilterStatus(filterValue);\n  };\n\n  console.log('STATUS: ', filterStatus);\n\n  return (\n    <Section>\n      <Container>\n        <label>\n          LATEST\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.LATEST}\n            name=\"sortBy\"\n            value={SortStatus.LATEST}\n            onChange={handleSortChange}\n          />\n        </label>\n        <label>\n          RATING\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.RATING}\n            name=\"sortBy\"\n            value={SortStatus.RATING}\n            onChange={handleSortChange}\n          />\n        </label>\n        <label>\n          YEAR\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.YEAR}\n            name=\"sortBy\"\n            value={SortStatus.YEAR}\n            onChange={handleSortChange}\n          />\n        </label>\n        <label>\n          Choose genre\n          <select\n            name=\"genres\"\n            value={filterStatus}\n            onChange={handleGenreChange}\n          >\n            <option value=\"\"></option>\n            {allGenres.map(genre => {\n              return (\n                <option key={genre} value={genre}>\n                  {genre}\n                </option>\n              );\n            })}\n          </select>\n        </label>\n\n        <Button\n          onClick={() => fetchLibraryMovies('queue', sortStatus, filterStatus)}\n        >\n          Queue\n        </Button>\n        <Button\n          onClick={() =>\n            fetchLibraryMovies('watched', sortStatus, filterStatus)\n          }\n        >\n          Watched\n        </Button>\n        {searchParams.get('view')}\n        {libraryMovies?.length}\n        {libraryMovies?.length !== 0 && (\n          <MovieList\n            movies={libraryMovies}\n            fetchLibraryMovies={fetchLibraryMovies}\n            searchParams={searchParams}\n            sortStatus={sortStatus}\n            filterStatus={filterStatus}\n          />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Library;\n"],"names":["SortStatus","Library","useState","libraryMovies","setLibraryMovies","sortStatus","setSortStatus","filterStatus","setFilterStatus","allGenres","setAllGenres","user","useUser","useSearchParams","searchParams","setSearchParams","fetchLibraryMovies","viewStatus","view","fetchAllLibraryMovies","snapshot","moviesByStatus","Object","values","val","filter","movie","sortMovies","sortBy","genres","flatMap","split","index","array","indexOf","filterMovies","filterBy","toast","sort","a","b","vote_average","release_date","localeCompare","includes","handleSortChange","e","viewValue","get","sortValue","target","value","console","log","type","checked","name","onChange","filterValue","map","genre","onClick","length","movies"],"sourceRoot":""}