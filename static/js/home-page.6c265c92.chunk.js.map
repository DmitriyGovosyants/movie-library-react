{"version":3,"file":"static/js/home-page.6c265c92.chunk.js","mappings":"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","sources":["helpers/srcollToTop.js","pages/Home.jsx","hooks/usePrevious.js"],"sourcesContent":["  export const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'instant',\n    });\n  };","import { useState, useEffect, useCallback } from 'react';\nimport { usePrevious } from 'hooks/usePrevious';\nimport {\n  fetchMoviesOnTrend,\n  fetchMovieTopRated,\n  fetchMoviesByName,\n  fetchMoviesByGenre,\n} from 'services/movieApi';\nimport { scrollToTop } from 'helpers/srcollToTop';\nimport { HomeControlBar, MovieList, Pagination, Spinner } from 'components';\nimport { Section, Container } from 'layout';\nimport { useUser } from 'context/userContext';\nimport { SortConstants } from 'constants/constants';\nimport { toast } from 'react-toastify';\nimport { useSearchParams } from 'react-router-dom';\n\nconst defaultParams = {\n  sorting: SortConstants.TREND,\n};\n\nconst Home = () => {\n  const [searchParams, setSearchParams] = useSearchParams(defaultParams);\n  const [search, setSearch] = useState(() => searchParams.get('search') ?? '');\n  const [page, setPage] = useState(Number(searchParams.get('page') ?? 1));\n  const [filterStatus, setFilterStatus] = useState(null);\n  const [movies, setMovies] = useState([]);\n  const [totalPage, setTotalPage] = useState(0);\n  const [showLoader, setShowLoader] = useState(false);\n  const prevQuery = usePrevious(search);\n  const { userLanguage } = useUser();\n  const sorting = searchParams.get('sorting');\n\n  console.log(page);\n\n  useEffect(() => {\n    setSearchParams({ sorting, search, page: page });\n  }, [filterStatus, page, search, setSearchParams, sorting]);\n\n  const getMoviesOnTrend = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesOnTrend(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesTopRated = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMovieTopRated(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesByGenre = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    let extraSortStatus;\n    if (sorting === SortConstants.TREND) {\n      extraSortStatus = 'popularity.desc';\n    }\n    if (sorting === SortConstants.RATING) {\n      extraSortStatus = 'vote_average.desc';\n    }\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesByGenre(\n        page,\n        userLanguage.value,\n        filterStatus.value,\n        extraSortStatus\n      );\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [filterStatus?.value, page, sorting, userLanguage?.value]);\n\n  const getMoviesByName = useCallback(async () => {\n    if (search !== prevQuery) {\n      setMovies([]);\n      setFilterStatus(null);\n      return;\n    }\n\n    const fetch = async () => {\n      setShowLoader(true);\n      scrollToTop();\n\n      try {\n        const {\n          data: { results, total_pages },\n        } = await fetchMoviesByName(page, search, userLanguage.value);\n\n        setTotalPage(total_pages);\n        setMovies([...results]);\n      } catch (e) {\n        toast.error(e.message);\n      } finally {\n        setShowLoader(false);\n      }\n    };\n    fetch();\n  }, [page, prevQuery, search, userLanguage.value]);\n\n  useEffect(() => {\n    if (sorting === SortConstants.TREND && !filterStatus) {\n      getMoviesOnTrend();\n      return;\n    }\n    if (sorting === SortConstants.RATING && !filterStatus) {\n      getMoviesTopRated();\n      return;\n    }\n    if (sorting !== SortConstants.SEARCH && filterStatus) {\n      getMoviesByGenre();\n      return;\n    }\n    if (sorting === SortConstants.SEARCH) {\n      getMoviesByName();\n      return;\n    }\n  }, [\n    filterStatus,\n    getMoviesByGenre,\n    getMoviesByName,\n    getMoviesOnTrend,\n    getMoviesTopRated,\n    sorting,\n  ]);\n\n  // const hanglePage = value => {\n  //   setPage(value);\n  //   setSearchParams({ sorting, search, page });\n  // };\n\n  return (\n    <Section>\n      <Container>\n        <HomeControlBar\n          sorting={sorting}\n          setSearchParams={setSearchParams}\n          filterStatus={filterStatus}\n          setFilterStatus={setFilterStatus}\n          search={search}\n          setSearch={setSearch}\n          setPage={setPage}\n          page={page}\n          totalPage={totalPage}\n        />\n        {showLoader && <Spinner />}\n        {movies.length !== 0 && <MovieList movies={movies} />}\n        {movies.length > 0 && (\n          <Pagination setPage={setPage} page={page} totalPage={totalPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n","import { useEffect, useRef } from \"react\";\n\nexport const usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};"],"names":["scrollToTop","window","scrollTo","top","behavior","defaultParams","sorting","SortConstants","useSearchParams","searchParams","setSearchParams","useState","get","search","setSearch","Number","page","setPage","filterStatus","setFilterStatus","movies","setMovies","totalPage","setTotalPage","showLoader","setShowLoader","prevQuery","value","ref","useRef","useEffect","current","usePrevious","userLanguage","useUser","console","log","getMoviesOnTrend","useCallback","fetchMoviesOnTrend","data","results","total_pages","toast","message","getMoviesTopRated","fetchMovieTopRated","getMoviesByGenre","extraSortStatus","fetchMoviesByGenre","getMoviesByName","fetch","fetchMoviesByName","length"],"sourceRoot":""}