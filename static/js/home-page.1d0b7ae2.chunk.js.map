{"version":3,"file":"static/js/home-page.1d0b7ae2.chunk.js","mappings":"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","sources":["hooks/useFiltering.js","helpers/srcollToTop.js","hooks/usePrevious.js","pages/Home.jsx"],"sourcesContent":["import { useState } from 'react';\n\nexport const useFiltering = searchParams => {\n  const [state, setState] = useState(() => {\n    const data = searchParams.get('filtering');\n    if (!data) {\n      return null;\n    }\n    const dataSplit = data.split('-');\n    return { value: Number(dataSplit[0]), label: dataSplit[1] };\n  });\n\n  return [state, setState];\n};","  export const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'instant',\n    });\n  };","import PropTypes from 'prop-types';\nimport { useEffect, useRef } from \"react\";\n\nexport const usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};\n\nusePrevious.propTypes = {\n  value: PropTypes.string.isRequired,\n};","import { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { SortConstants } from 'constants/constants';\nimport { scrollToTop } from 'helpers/srcollToTop';\nimport { useUser } from 'context/userContext';\nimport { usePrevious } from 'hooks/usePrevious';\nimport { useFiltering } from 'hooks/useFiltering';\nimport {\n  fetchMoviesOnTrend,\n  fetchMovieTopRated,\n  fetchMoviesByName,\n  fetchMoviesByGenre,\n} from 'services/movieApi';\nimport { HomeControlBar, MovieList, Pagination, Spinner } from 'components';\nimport { Section, Container } from 'layout';\n\nconst defaultParams = {\n  sorting: SortConstants.TREND,\n};\n\nconst Home = () => {\n  const [searchParams, setSearchParams] = useSearchParams(defaultParams);\n  const [search, setSearch] = useState(() => searchParams.get('search') ?? '');\n  const [page, setPage] = useState(() => Number(searchParams.get('page') ?? 1));\n  const [filterStatus, setFilterStatus] = useFiltering(searchParams);\n  const [movies, setMovies] = useState([]);\n  const [totalPage, setTotalPage] = useState(0);\n  const [showLoader, setShowLoader] = useState(false);\n  const prevQuery = usePrevious(search);\n  const { userLanguage } = useUser();\n  const sorting = searchParams.get('sorting');\n\n  const getMoviesOnTrend = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesOnTrend(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesTopRated = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMovieTopRated(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesByGenre = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    let extraSortStatus;\n    if (sorting === SortConstants.TREND) {\n      extraSortStatus = 'popularity.desc';\n    }\n    if (sorting === SortConstants.RATING) {\n      extraSortStatus = 'vote_average.desc';\n    }\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesByGenre(\n        page,\n        userLanguage.value,\n        filterStatus.value,\n        extraSortStatus\n      );\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      toast.error(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [filterStatus?.value, page, sorting, userLanguage?.value]);\n\n  const getMoviesByName = useCallback(async () => {\n    if (search !== prevQuery) {\n      setMovies([]);\n      setFilterStatus(null);\n      return;\n    }\n\n    const fetch = async () => {\n      setShowLoader(true);\n      scrollToTop();\n\n      try {\n        const {\n          data: { results, total_pages },\n        } = await fetchMoviesByName(page, search, userLanguage.value);\n\n        setTotalPage(total_pages);\n        setMovies([...results]);\n      } catch (e) {\n        toast.error(e.message);\n      } finally {\n        setShowLoader(false);\n      }\n    };\n    fetch();\n  }, [page, prevQuery, search, setFilterStatus, userLanguage.value]);\n\n  useEffect(() => {\n    setSearchParams({\n      sorting,\n      search,\n      filtering: filterStatus\n        ? `${filterStatus?.value}-${filterStatus?.label}`\n        : '',\n      page: page,\n    });\n  }, [filterStatus, page, search, setSearchParams, sorting]);\n\n  useEffect(() => {\n    if (sorting === SortConstants.TREND && !filterStatus) {\n      getMoviesOnTrend();\n      return;\n    }\n    if (sorting === SortConstants.RATING && !filterStatus) {\n      getMoviesTopRated();\n      return;\n    }\n    if (sorting !== SortConstants.SEARCH && filterStatus) {\n      getMoviesByGenre();\n      return;\n    }\n    if (sorting === SortConstants.SEARCH) {\n      getMoviesByName();\n      return;\n    }\n  }, [\n    filterStatus,\n    getMoviesByGenre,\n    getMoviesByName,\n    getMoviesOnTrend,\n    getMoviesTopRated,\n    sorting,\n  ]);\n\n  return (\n    <Section>\n      <Container>\n        <HomeControlBar\n          page={page}\n          totalPage={totalPage > 500 ? 500 : totalPage}\n          sorting={sorting}\n          filterStatus={filterStatus}\n          search={search}\n          setSearchParams={setSearchParams}\n          setFilterStatus={setFilterStatus}\n          setSearch={setSearch}\n          setPage={setPage}\n        />\n        {showLoader && <Spinner />}\n        {movies.length !== 0 && <MovieList movies={movies} />}\n        {movies.length > 0 && (\n          <Pagination\n            page={page}\n            totalPage={totalPage > 500 ? 500 : totalPage}\n            setPage={setPage}\n          />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n"],"names":["useFiltering","searchParams","useState","data","get","dataSplit","split","value","Number","label","scrollToTop","window","scrollTo","top","behavior","usePrevious","ref","useRef","useEffect","current","propTypes","PropTypes","defaultParams","sorting","SortConstants","useSearchParams","setSearchParams","search","setSearch","page","setPage","filterStatus","setFilterStatus","movies","setMovies","totalPage","setTotalPage","showLoader","setShowLoader","prevQuery","userLanguage","useUser","getMoviesOnTrend","useCallback","fetchMoviesOnTrend","results","total_pages","toast","message","getMoviesTopRated","fetchMovieTopRated","getMoviesByGenre","extraSortStatus","fetchMoviesByGenre","getMoviesByName","fetch","fetchMoviesByName","filtering","length"],"sourceRoot":""}