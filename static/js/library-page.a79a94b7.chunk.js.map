{"version":3,"file":"static/js/library-page.a79a94b7.chunk.js","mappings":"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","sources":["pages/Library.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Section, Container, Button, MovieList } from 'components';\nimport { useUser } from 'context/userContext';\nimport { fetchAllLibraryMovies } from 'services/libraryApi';\nimport { SortStatus, ViewStatus } from 'constants/constants';\nimport { useEffect } from 'react';\nimport { useCallback } from 'react';\n\nexport const Library = () => {\n  const [libraryMovies, setLibraryMovies] = useState([]);\n  const [sortStatus, setSortStatus] = useState(SortStatus.LATEST);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [viewStatus, setViewStatus] = useState(ViewStatus.QUEUE);\n  const [allGenres, setAllGenres] = useState([]);\n  const [refreshPage, setRefreshPage] = useState(false);\n  const { user } = useUser();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sortBy = useCallback(\n    moviesByStatus => {\n      if (sortStatus === SortStatus.LATEST) {\n        return [...moviesByStatus].sort(\n          (a, b) => b[`${viewStatus}DateAdded`] - a[`${viewStatus}DateAdded`]\n        );\n      }\n      if (sortStatus === SortStatus.RATING) {\n        return [...moviesByStatus].sort(\n          (a, b) => b.vote_average - a.vote_average\n        );\n      }\n      if (sortStatus === SortStatus.YEAR) {\n        return [...moviesByStatus].sort((a, b) =>\n          b.release_date.localeCompare(a.release_date)\n        );\n      }\n    },\n    [sortStatus, viewStatus]\n  );\n\n  const filterBy = useCallback(\n    sortMovies => {\n      return sortMovies.filter(movie => {\n        return movie.genres.includes(filterStatus);\n      });\n    },\n    [filterStatus]\n  );\n\n  useEffect(() => {\n    const fetchLibraryMovies = async () => {\n      setRefreshPage(false);\n      setSearchParams({ view: viewStatus });\n\n      try {\n        const snapshot = await fetchAllLibraryMovies(user);\n        const moviesByStatus = Object.values(snapshot.val()).filter(\n          movie => movie[viewStatus] === true\n        );\n\n        const sortMovies = sortBy(moviesByStatus);\n\n        getUniqueGenres(sortMovies);\n\n        if (filterStatus) {\n          const filterMovies = filterBy(sortMovies);\n          setLibraryMovies(filterMovies);\n        }\n\n        if (!filterStatus) {\n          setLibraryMovies(sortMovies);\n        }\n      } catch (error) {\n        toast.info(`You have no movies in ${viewStatus}`);\n        setLibraryMovies([]);\n      }\n    };\n    fetchLibraryMovies();\n  }, [\n    filterBy,\n    filterStatus,\n    refreshPage,\n    setSearchParams,\n    sortBy,\n    user,\n    viewStatus,\n  ]);\n\n  const getUniqueGenres = movieArr => {\n    const uniqueGenres = movieArr\n      .flatMap(movie => movie.genres.split(','))\n      .filter((movie, index, array) => array.indexOf(movie) === index);\n\n    setAllGenres(uniqueGenres);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <label>\n          LATEST\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.LATEST}\n            name=\"sortBy\"\n            value={SortStatus.LATEST}\n            onChange={e => setSortStatus(e.target.value)}\n          />\n        </label>\n        <label>\n          RATING\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.RATING}\n            name=\"sortBy\"\n            value={SortStatus.RATING}\n            onChange={e => setSortStatus(e.target.value)}\n          />\n        </label>\n        <label>\n          YEAR\n          <input\n            type=\"radio\"\n            checked={sortStatus === SortStatus.YEAR}\n            name=\"sortBy\"\n            value={SortStatus.YEAR}\n            onChange={e => setSortStatus(e.target.value)}\n          />\n        </label>\n        <label>\n          Choose genre\n          <select\n            name=\"genres\"\n            value={filterStatus}\n            onChange={e => setFilterStatus(e.target.value)}\n          >\n            <option value=\"\"></option>\n            {allGenres.map(genre => {\n              return (\n                <option key={genre} value={genre}>\n                  {genre}\n                </option>\n              );\n            })}\n          </select>\n        </label>\n\n        <Button onClick={() => setViewStatus(ViewStatus.QUEUE)}>Queue</Button>\n        <Button onClick={() => setViewStatus(ViewStatus.WATCHED)}>\n          Watched\n        </Button>\n        {searchParams.get('view')}\n        {libraryMovies?.length}\n        {libraryMovies?.length !== 0 && (\n          <MovieList movies={libraryMovies} setRefreshPage={setRefreshPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Library;\n"],"names":["Library","useState","libraryMovies","setLibraryMovies","SortStatus","sortStatus","setSortStatus","filterStatus","setFilterStatus","ViewStatus","viewStatus","setViewStatus","allGenres","setAllGenres","refreshPage","setRefreshPage","user","useUser","useSearchParams","searchParams","setSearchParams","sortBy","useCallback","moviesByStatus","sort","a","b","vote_average","release_date","localeCompare","filterBy","sortMovies","filter","movie","genres","includes","useEffect","fetchLibraryMovies","view","fetchAllLibraryMovies","snapshot","Object","values","val","getUniqueGenres","filterMovies","toast","movieArr","uniqueGenres","flatMap","split","index","array","indexOf","type","checked","name","value","onChange","e","target","map","genre","onClick","get","length","movies"],"sourceRoot":""}