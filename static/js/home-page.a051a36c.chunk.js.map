{"version":3,"file":"static/js/home-page.a051a36c.chunk.js","mappings":"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","sources":["helpers/srcollToTop.js","pages/Home.jsx","hooks/usePrevious.js"],"sourcesContent":["  export const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'instant',\n    });\n  };","import { useState, useEffect, useCallback } from 'react';\nimport { usePrevious } from 'hooks/usePrevious';\nimport {\n  fetchMoviesOnTrend,\n  fetchMovieTopRated,\n  fetchMoviesByName,\n  fetchMoviesByGenre,\n} from 'services/movieApi';\nimport { scrollToTop } from 'helpers/srcollToTop';\nimport {\n  HomeControlBar,\n  ErrorMessage,\n  MovieList,\n  Pagination,\n  Spinner,\n} from 'components';\nimport { Section, Container } from 'layout';\nimport { useUser } from 'context/userContext';\nimport { SortConstants } from 'constants/constants';\n\nconst Home = () => {\n  const { userLanguage } = useUser();\n  const [sortStatus, setSortStatus] = useState(SortConstants.TREND);\n  const [filterStatus, setFilterStatus] = useState(null);\n  const [search, setSearch] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const [showLoader, setShowLoader] = useState(false);\n  const [error, setError] = useState(null);\n  const prevQuery = usePrevious(search);\n\n  console.log(sortStatus, filterStatus, search);\n\n  const getMoviesOnTrend = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesOnTrend(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesTopRated = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMovieTopRated(page, userLanguage.value);\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [page, userLanguage.value]);\n\n  const getMoviesByGenre = useCallback(async () => {\n    setShowLoader(true);\n    scrollToTop();\n\n    let extraSortStatus;\n    if (sortStatus === SortConstants.TREND) {\n      extraSortStatus = 'popularity.desc';\n    }\n    if (sortStatus === SortConstants.RATING) {\n      extraSortStatus = 'vote_average.desc';\n    }\n\n    try {\n      const {\n        data: { results, total_pages },\n      } = await fetchMoviesByGenre(\n        page,\n        userLanguage.value,\n        filterStatus.value,\n        extraSortStatus\n      );\n\n      setTotalPage(total_pages);\n      setMovies([...results]);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setShowLoader(false);\n    }\n  }, [filterStatus?.value, page, sortStatus, userLanguage?.value]);\n\n  useEffect(() => {\n    if (sortStatus === SortConstants.TREND && !filterStatus) {\n      getMoviesOnTrend();\n      return;\n    }\n    if (sortStatus === SortConstants.RATING && !filterStatus) {\n      getMoviesTopRated();\n      return;\n    }\n    if (sortStatus !== SortConstants.SEARCH && filterStatus) {\n      getMoviesByGenre();\n      return;\n    }\n  }, [\n    filterStatus,\n    getMoviesByGenre,\n    getMoviesOnTrend,\n    getMoviesTopRated,\n    sortStatus,\n  ]);\n\n  useEffect(() => {\n    if (sortStatus !== SortConstants.SEARCH) {\n      return;\n    }\n    if (search !== prevQuery) {\n      setMovies([]);\n      setPage(1);\n      setFilterStatus(null);\n      return;\n    }\n\n    const fetch = async () => {\n      setShowLoader(true);\n      scrollToTop();\n\n      try {\n        const {\n          data: { results, total_pages },\n        } = await fetchMoviesByName(page, search, userLanguage.value);\n\n        setTotalPage(total_pages);\n        setMovies([...results]);\n      } catch (e) {\n        setError(e.message);\n      } finally {\n        setShowLoader(false);\n      }\n    };\n    fetch();\n  }, [page, search, prevQuery, userLanguage.value, sortStatus, filterStatus]);\n\n  return (\n    <Section>\n      <Container>\n        <HomeControlBar\n          sortStatus={sortStatus}\n          setSortStatus={setSortStatus}\n          filterStatus={filterStatus}\n          setFilterStatus={setFilterStatus}\n          search={search}\n          setSearch={setSearch}\n          setPage={setPage}\n          page={page}\n          totalPage={totalPage}\n        />\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        {showLoader && <Spinner />}\n        {movies.length !== 0 && <MovieList movies={movies} />}\n        {movies.length > 0 && (\n          <Pagination setPage={setPage} page={page} totalPage={totalPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n","import { useEffect, useRef } from \"react\";\n\nexport const usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};"],"names":["scrollToTop","window","scrollTo","top","behavior","userLanguage","useUser","useState","SortConstants","sortStatus","setSortStatus","filterStatus","setFilterStatus","search","setSearch","movies","setMovies","page","setPage","totalPage","setTotalPage","showLoader","setShowLoader","error","setError","prevQuery","value","ref","useRef","useEffect","current","usePrevious","console","log","getMoviesOnTrend","useCallback","fetchMoviesOnTrend","data","results","total_pages","message","getMoviesTopRated","fetchMovieTopRated","getMoviesByGenre","extraSortStatus","fetchMoviesByGenre","fetch","fetchMoviesByName","length"],"sourceRoot":""}