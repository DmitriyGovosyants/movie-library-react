{"version":3,"file":"static/js/library-page.5d96710e.chunk.js","mappings":"uTAUaA,EAAU,WACrB,IAAQC,GAASC,EAAAA,EAAAA,KAATD,KACR,GAA4BE,EAAAA,EAAAA,MAAnBC,GAAT,eACA,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoCJ,EAAAA,EAAAA,UAASK,EAAAA,EAAAA,OAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAoCP,EAAAA,EAAAA,UAASQ,EAAAA,EAAAA,QAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCV,EAAAA,EAAAA,UAAS,IAAjD,eAAOW,EAAP,KAAqBC,EAArB,KACA,GAAsCZ,EAAAA,EAAAA,WAAS,GAA/C,eAAOa,EAAP,KAAoBC,EAApB,KAEMC,GAASC,EAAAA,EAAAA,cACb,SAAAC,GACE,OAAIR,IAAeD,EAAAA,EAAAA,QACV,OAAIS,GAAgBC,MACzB,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAD,OAAId,EAAJ,cAA6Ba,EAAE,GAAD,OAAIb,EAAJ,iBAGzCG,IAAeD,EAAAA,EAAAA,QACV,OAAIS,GAAgBC,MACzB,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,aAAeF,EAAEE,gBAG7BZ,IAAeD,EAAAA,EAAAA,MACV,OAAIS,GAAgBC,MAAK,SAACC,EAAGC,GAAJ,OAC9BA,EAAEE,aAAaC,cAAcJ,EAAEG,sBAFnC,IAMF,CAACb,EAAYH,IAGTkB,GAAWR,EAAAA,EAAAA,cACf,SAAAS,GACE,OAAI,OAACd,QAAD,IAACA,GAAAA,EAAce,MAInB,OAAIf,QAAJ,IAAIA,GAAAA,EAAce,MACTD,EAAWE,QAAO,SAAAC,GACvB,OAAOA,EAAMC,OAAOC,SAASnB,EAAae,eAF9C,EAHSD,IASX,QAACd,QAAD,IAACA,OAAD,EAACA,EAAce,SAGjBK,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,iGACzBlB,GAAe,GACff,EAAgB,CAAEkC,KAAM3B,IAFC,mBAKA4B,EAAAA,EAAAA,IAAsBtC,GALtB,OAKjBuC,EALiB,OAMjBlB,EAAiBmB,OAAOC,OAAOF,EAASG,OAAOX,QACnD,SAAAC,GAAK,OAA0B,IAAtBA,EAAMtB,MAGjBiC,EAAgBtB,GACVQ,EAAaV,EAAOE,GACpBuB,EAAehB,EAASC,GAC9BvB,EAAiBsC,GAbM,kDAevBC,EAAAA,GAAAA,KAAA,gCAAoCnC,IACpCJ,EAAiB,IAhBM,0DAAH,qDAmBxB8B,MACC,CACDR,EACAb,EACAE,EACAd,EACAgB,EACAnB,EACAU,IAGF,IAAMiC,EAAkB,SAAAG,GACtB,IAAMC,EAAeD,EAClBE,SAAQ,SAAAhB,GAAK,OAAIA,EAAMC,OAAOgB,MAAM,SACpClB,QAAO,SAACC,EAAOkB,EAAOC,GAAf,OAAyBA,EAAMC,QAAQpB,KAAWkB,KACzD5B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,cAAcH,MAElChB,EAAauC,IAGf,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CACElC,WAAYA,EACZC,cAAeA,EACfC,aAAcA,EACdC,gBAAiBA,EACjBN,WAAYA,EACZC,cAAeA,EACfJ,UAAWA,EACXF,cAAeA,IAGU,KAAb,OAAbA,QAAa,IAAbA,OAAA,EAAAA,EAAegD,UACd,SAAC,KAAD,CAAWC,OAAQjD,EAAea,eAAgBA,UAO5D","sources":["pages/Library.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Section, Container, MovieList, LibraryControlBar } from 'components';\nimport { useUser } from 'hooks/userContext';\nimport { fetchAllLibraryMovies } from 'services/libraryApi';\nimport { SortStatus, ViewStatus } from 'constants/constants';\nimport { useEffect } from 'react';\nimport { useCallback } from 'react';\n\nexport const Library = () => {\n  const { user } = useUser();\n  const [, setSearchParams] = useSearchParams();\n  const [libraryMovies, setLibraryMovies] = useState([]);\n  const [allGenres, setAllGenres] = useState([]);\n  const [viewStatus, setViewStatus] = useState(ViewStatus.QUEUE);\n  const [sortStatus, setSortStatus] = useState(SortStatus.LATEST);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [refreshPage, setRefreshPage] = useState(false);\n\n  const sortBy = useCallback(\n    moviesByStatus => {\n      if (sortStatus === SortStatus.LATEST) {\n        return [...moviesByStatus].sort(\n          (a, b) => b[`${viewStatus}DateAdded`] - a[`${viewStatus}DateAdded`]\n        );\n      }\n      if (sortStatus === SortStatus.RATING) {\n        return [...moviesByStatus].sort(\n          (a, b) => b.vote_average - a.vote_average\n        );\n      }\n      if (sortStatus === SortStatus.YEAR) {\n        return [...moviesByStatus].sort((a, b) =>\n          b.release_date.localeCompare(a.release_date)\n        );\n      }\n    },\n    [sortStatus, viewStatus]\n  );\n\n  const filterBy = useCallback(\n    sortMovies => {\n      if (!filterStatus?.value) {\n        return sortMovies;\n      }\n\n      if (filterStatus?.value) {\n        return sortMovies.filter(movie => {\n          return movie.genres.includes(filterStatus.value);\n        });\n      }\n    },\n    [filterStatus?.value]\n  );\n\n  useEffect(() => {\n    const fetchLibraryMovies = async () => {\n      setRefreshPage(false);\n      setSearchParams({ view: viewStatus });\n\n      try {\n        const snapshot = await fetchAllLibraryMovies(user);\n        const moviesByStatus = Object.values(snapshot.val()).filter(\n          movie => movie[viewStatus] === true\n        );\n\n        getUniqueGenres(moviesByStatus);\n        const sortMovies = sortBy(moviesByStatus);\n        const filterMovies = filterBy(sortMovies);\n        setLibraryMovies(filterMovies);\n      } catch (error) {\n        toast.info(`You have no movies in ${viewStatus}`);\n        setLibraryMovies([]);\n      }\n    };\n    fetchLibraryMovies();\n  }, [\n    filterBy,\n    filterStatus,\n    refreshPage,\n    setSearchParams,\n    sortBy,\n    user,\n    viewStatus,\n  ]);\n\n  const getUniqueGenres = movieArr => {\n    const uniqueGenres = movieArr\n      .flatMap(movie => movie.genres.split(', '))\n      .filter((movie, index, array) => array.indexOf(movie) === index)\n      .sort((a, b) => a.localeCompare(b));\n\n    setAllGenres(uniqueGenres);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <LibraryControlBar\n          sortStatus={sortStatus}\n          setSortStatus={setSortStatus}\n          filterStatus={filterStatus}\n          setFilterStatus={setFilterStatus}\n          viewStatus={viewStatus}\n          setViewStatus={setViewStatus}\n          allGenres={allGenres}\n          libraryMovies={libraryMovies}\n        />\n\n        {libraryMovies?.length !== 0 && (\n          <MovieList movies={libraryMovies} setRefreshPage={setRefreshPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Library;\n"],"names":["Library","user","useUser","useSearchParams","setSearchParams","useState","libraryMovies","setLibraryMovies","allGenres","setAllGenres","ViewStatus","viewStatus","setViewStatus","SortStatus","sortStatus","setSortStatus","filterStatus","setFilterStatus","refreshPage","setRefreshPage","sortBy","useCallback","moviesByStatus","sort","a","b","vote_average","release_date","localeCompare","filterBy","sortMovies","value","filter","movie","genres","includes","useEffect","fetchLibraryMovies","view","fetchAllLibraryMovies","snapshot","Object","values","val","getUniqueGenres","filterMovies","toast","movieArr","uniqueGenres","flatMap","split","index","array","indexOf","length","movies"],"sourceRoot":""}