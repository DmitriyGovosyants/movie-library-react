{"version":3,"file":"static/js/library-page.1af4a830.chunk.js","mappings":"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","sources":["hooks/useFiltering.js","pages/Library.jsx"],"sourcesContent":["import { useState } from 'react';\n\nexport const useFiltering = searchParams => {\n  const [state, setState] = useState(() => {\n    const data = searchParams.get('filtering');\n    if (!data) {\n      return null;\n    }\n    const dataSplit = data.split('-');\n    return { value: Number(dataSplit[0]), label: dataSplit[1] };\n  });\n\n  return [state, setState];\n};","import { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { SortConstants, ViewConstants } from 'constants/constants';\nimport { useUser } from 'context/userContext';\nimport { useTMDBData } from 'context/tmdbDataContext';\nimport { useFiltering } from 'hooks/useFiltering';\nimport { fetchAllLibraryMovies } from 'services/libraryApi';\nimport { MovieList, LibraryControlBar } from 'components';\nimport { Section, Container } from 'layout';\n\nconst defaultParams = {\n  viewing: ViewConstants.QUEUE,\n  sorting: SortConstants.LATEST,\n};\n\nexport const Library = () => {\n  const [searchParams, setSearchParams] = useSearchParams(defaultParams);\n  const { user } = useUser();\n  const { genresList } = useTMDBData();\n  const [libraryMovies, setLibraryMovies] = useState([]);\n  const [allGenres, setAllGenres] = useState([]);\n  const [refreshPage, setRefreshPage] = useState(false);\n  const [filterStatus, setFilterStatus] = useFiltering(searchParams);\n  const viewing = searchParams.get('viewing');\n  const sorting = searchParams.get('sorting');\n\n  useEffect(() => {\n    setSearchParams({\n      viewing,\n      sorting,\n      filtering: filterStatus\n        ? `${filterStatus?.value}-${filterStatus?.label}`\n        : '',\n    });\n  }, [filterStatus, setSearchParams, sorting, viewing]);\n\n  const sortBy = useCallback(\n    moviesByStatus => {\n      if (sorting === SortConstants.LATEST) {\n        return [...moviesByStatus].sort(\n          (a, b) => b[`${viewing}DateAdded`] - a[`${viewing}DateAdded`]\n        );\n      }\n      if (sorting === SortConstants.RATING) {\n        return [...moviesByStatus].sort(\n          (a, b) => b.vote_average - a.vote_average\n        );\n      }\n      if (sorting === SortConstants.YEAR) {\n        return [...moviesByStatus].sort((a, b) =>\n          b.release_date.localeCompare(a.release_date)\n        );\n      }\n    },\n    [sorting, viewing]\n  );\n\n  const filterBy = useCallback(\n    sortMovies => {\n      if (!filterStatus?.value) {\n        return sortMovies;\n      }\n\n      if (filterStatus?.value) {\n        return sortMovies.filter(movie => {\n          return movie.genres.includes(filterStatus.value);\n        });\n      }\n    },\n    [filterStatus?.value]\n  );\n\n  useEffect(() => {\n    const fetchLibraryMovies = async () => {\n      setRefreshPage(false);\n\n      try {\n        const snapshot = await fetchAllLibraryMovies(user);\n        const moviesByStatus = Object.values(snapshot.val()).filter(\n          movie => movie[viewing] === true\n        );\n\n        getUniqueGenres(moviesByStatus, genresList);\n        const sortMovies = sortBy(moviesByStatus);\n        const filterMovies = filterBy(sortMovies);\n        setLibraryMovies(filterMovies);\n      } catch (error) {\n        toast.info(`You have no movies in ${viewing}`);\n        setLibraryMovies([]);\n      }\n    };\n    fetchLibraryMovies();\n  }, [filterBy, filterStatus, genresList, refreshPage, sortBy, user, viewing]);\n\n  const getUniqueGenres = (movieArr, genresList) => {\n    const uniqueGenres = movieArr\n      .flatMap(movie => movie.genres)\n      .filter((genreID, index, array) => array.indexOf(genreID) === index)\n      .map(genreID => genresList.find(({ id }) => id === genreID));\n\n    setAllGenres(uniqueGenres);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <LibraryControlBar\n          sorting={sorting}\n          viewing={viewing}\n          setSearchParams={setSearchParams}\n          filterStatus={filterStatus}\n          setFilterStatus={setFilterStatus}\n          allGenres={allGenres}\n          libraryMovies={libraryMovies}\n        />\n\n        {libraryMovies?.length !== 0 && (\n          <MovieList movies={libraryMovies} setRefreshPage={setRefreshPage} />\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Library;\n"],"names":["useFiltering","searchParams","useState","data","get","dataSplit","split","value","Number","label","defaultParams","viewing","ViewConstants","sorting","SortConstants","Library","useSearchParams","setSearchParams","user","useUser","genresList","useTMDBData","libraryMovies","setLibraryMovies","allGenres","setAllGenres","refreshPage","setRefreshPage","filterStatus","setFilterStatus","useEffect","filtering","sortBy","useCallback","moviesByStatus","sort","a","b","vote_average","release_date","localeCompare","filterBy","sortMovies","filter","movie","genres","includes","fetchLibraryMovies","fetchAllLibraryMovies","snapshot","Object","values","val","getUniqueGenres","filterMovies","toast","movieArr","uniqueGenres","flatMap","genreID","index","array","indexOf","map","find","id","length","movies"],"sourceRoot":""}